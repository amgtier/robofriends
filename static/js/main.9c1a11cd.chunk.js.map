{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","idx","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","error","info","setState","React","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","fileterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAgBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAe,EAARC,GACxB,OACI,kBAAC,WAAD,KACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAK,oCAAqCC,IAAI,WACnD,6BACI,4BAAML,GACN,2BAAKC,OCaVK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLT,GAAIK,EAAOI,GAAKT,GAChBF,KAAMO,EAAOI,GAAKX,KAClBC,MAAOM,EAAOI,GAAKV,WAG/B,OACI,kBAAC,WAAD,KACKO,ICDEK,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAU,OACX,2BACIA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCIZI,EAZA,SAACC,GACZ,OACI,yBAAKC,MAAO,CACRC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAENJ,EAAMK,WCgBLC,E,kDAtBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHM,E,qDAQjB,OAAIC,KAAKF,MAAMC,SACP,uDAGAC,KAAKT,MAAMK,W,wCAIFK,EAAOC,GAExBF,KAAKG,SAAS,CAAEJ,UAAU,Q,GAnBAK,IAAMC,WC4CnBC,E,kDAvCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAAElB,YAAauB,EAAMC,OAAOC,SAb1C,EAAKZ,MAAQ,CACTpB,OAAQ,GACRO,YAAa,IAJP,E,gEAQO,IAAD,OAChB0B,MAAM,8CACDC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAAW,EAAKZ,SAAS,CAACzB,OAAQqC,S,+BAOtC,IAAD,OACCC,EAAgBhB,KAAKF,MAAMpB,OAAOuC,QAAO,SAAAC,GAC3C,OAAOA,EAAM/C,KAAKgD,cAAcC,SAAS,EAAKtB,MAAMb,YAAYkC,kBAGpE,OAAgC,GAA5BnB,KAAKF,MAAMpB,OAAO2C,OACX,yCAGP,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAec,KAAKO,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU7B,OAASsC,W,GAjCzBZ,IAAMC,WCMJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.9c1a11cd.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <Fragment>\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src={'https://robohash.org/{id}?200x200'} alt='robots' />\n                <div>\n                    <h2>{ name }</h2>\n                    <p>{ email }</p>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Card;","import React, { Fragment } from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    // if (true){ // used to test when error happending\n    //     throw new Erorr('NOO');\n    // }\n    const cardComponent = robots.map((user, idx) => {\n            return <Card \n                key={idx} \n                id={robots[idx].id} \n                name={robots[idx].name} \n                email={robots[idx].email} \n            />\n    })\n    return (\n        <Fragment>\n            {cardComponent}\n        </Fragment>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={ searchChange }\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{\n            overflowY: 'scroll', \n            border: '1px solid black', \n            height: '500px'\n            }}>\n            { props.children }\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false,\n\t\t}\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Opps. That is not good.</h1>\n\t\t}\n\t\telse{\n\t\t\treturn this.props.children;\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\t// like try-catch block\n\t\tthis.setState({ hasError: true });\n\t}\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBundary';\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = { // smart component\n            robots: [],\n            searchfield: '',\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => { return response.json(); })\n            .then(users => { this.setState({robots: users}) });\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value});\n    }\n\n    render (){\n        const fileterRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        });\n\n        if (this.state.robots.length == 0){\n            return <h1> Loading </h1>\n        }\n        return (\n            <div className=\"tc\">\n                <h1 className=\"f2\">RoboFriends</h1>\n                <SearchBox searchChange={ this.onSearchChange } />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={ fileterRobots } />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}